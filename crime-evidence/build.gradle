plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.3-SNAPSHOT'
    id 'io.spring.dependency-management' version '1.1.0'
    id "org.sonarqube" version "3.5.0.2730"
    id 'info.solidsoft.pitest' version '1.9.11'
}

group = 'uk.gov.justice.laa.crime.evidence'

def versions = [
        lombokVersion                      : '1.18.24',
        commonsLang3Version                : '3.10',

        h2DBVersion                        : '1.4.200',
        mockitoVersion                     : '3.3.3',
        junitVersion                       : '4.13',
        harmcrestVersion                   : '1.3',
        testngVersion                      : '6.10',
        festVersion                        : '1.4',
        reactorTestVersion                 : '3.4.11',
        okhttpVersion                      : '4.9.3',
        mockwebserverVersion               : '4.9.3'
]

jacoco {
    toolVersion = "0.8.8"
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}
repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
    maven { url 'https://repo.spring.io/snapshot' }
}

dependencies {
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: versions.commonsLang3Version
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'

    compileOnly group: 'org.projectlombok', name: 'lombok', version: versions.lombokVersion
    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombokVersion
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

    implementation group: 'org.pitest', name: 'pitest', version: versions.pitest

    // Test Only
    testImplementation(group: 'org.springframework.boot', name: 'spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation group: 'com.h2database', name: 'h2', version: versions.h2DBVersion
    testImplementation group: 'org.mockito', name: 'mockito-inline', version: versions.mockitoVersion
    testImplementation group: 'junit', name: 'junit', version: versions.junitVersion
    testImplementation group: 'org.hamcrest', name: 'hamcrest-all', version: versions.harmcrestVersion
    testImplementation group: 'org.testng', name: 'testng', version: versions.testngVersion
    testImplementation group: 'org.easytesting', name: 'fest-assert', version: versions.festVersion
    testImplementation group: 'io.projectreactor', name: 'reactor-test', version: versions.reactorTestVersion
    testImplementation group: 'com.squareup.okhttp3', name: 'okhttp', version: versions.okhttpVersion
    testImplementation group: 'com.squareup.okhttp3', name: 'mockwebserver', version: versions.mockwebserverVersion
    testImplementation group: 'org.springframework.security', name: 'spring-security-test'
}

tasks.named('test').configure {
    it.useJUnitPlatform()
    it.dependsOn 'cleanTest'
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    onlyIf = { true }
    reports {
        xml.required = true
        html.required = true
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ['**/entity/**',
                              '**/dto/**',
                              '**/config/**'])
        }))
    }
}

pitest {
    targetClasses = ['uk.gov.justice.laa.crime.evidence.*','uk.gov.justice.laa.crime.evidence.controller.*','uk.gov.justice.laa.crime.evidence.validation.*']
    excludedClasses = ['uk.gov.justice.laa.crime.evidence.dto.*', 'uk.gov.justice.laa.crime.evidence.mapper.*', 'uk.gov.justice.laa.crime.evidence.CrimeEvidenceApplication']
    threads = 5
    outputFormats = ['XML', 'HTML']
    timestampedReports = false
    mutationThreshold = 60
}

tasks['sonarqube'].dependsOn test

sonarqube {
    properties {
        property "sonar.exclusions", "**/entity/**.java , **/model/**.java , **/dto/**.java , **/config/**.java, **/jms/**.java,**/exception/**.java,**/handler/**.java"
        property "sonar.coverage.exclusions", "**/CrimeEvidenceApplication.java"
        property "sonar.coverage.jacoco.xmlReportPaths", "${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml"
        property "sonar.projectKey", "ministryofjustice_laa-crime-evidence"
        property "sonar.organization", "ministryofjustice"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.projectName", "Crime Apps :: crime-evidence"
        property "sonar.pitest.mode", "reuseReport"
        property "sonar.pitest.reportsDirectory", "build/reports/pitest"
    }
}
