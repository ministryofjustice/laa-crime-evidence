import org.springframework.boot.gradle.plugin.SpringBootPlugin

plugins {
    id "java"
    id "jacoco"
    id "org.springframework.boot" version "3.0.4"
    id "org.sonarqube" version "4.0.0.2929"
    id "info.solidsoft.pitest" version "1.9.11"
    id "org.jsonschema2dataclass" version "6.0.0"
}

group = "uk.gov.justice.laa.crime"

jacoco {
    toolVersion = "0.8.8"
}

def versions = [
        springdocVersion       : "1.6.15",
        okhttpVersion          : "4.9.3",
        mockwebserverVersion   : "4.10.0",
        pitest                 : "1.4.10",
        commonsLang3Version    : "3.10",
        postgresqlVersion      : "42.3.3",
        springauthserverVersion: "1.0.1",
]

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}
repositories {
    mavenCentral()
}

dependencies {
    implementation platform("io.sentry:sentry-bom:6.17.0")
    implementation platform(SpringBootPlugin.BOM_COORDINATES)
    annotationProcessor platform(SpringBootPlugin.BOM_COORDINATES)

    implementation "io.sentry:sentry-spring-boot-starter"
    implementation "io.sentry:sentry-logback"

    compileOnly "org.projectlombok:lombok"

    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-webflux"
    implementation "org.springframework.boot:spring-boot-starter-validation"
    implementation "org.springframework.boot:spring-boot-starter-oauth2-resource-server"
    implementation "org.springframework.boot:spring-boot-starter-oauth2-client"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"

    implementation "org.liquibase:liquibase-core"

    implementation "org.springdoc:springdoc-openapi-ui:$versions.springdocVersion"
    implementation "org.springframework.security:spring-security-oauth2-authorization-server:$versions.springauthserverVersion"

    implementation "org.postgresql:postgresql:$versions.postgresqlVersion"
    implementation "org.apache.commons:commons-lang3:$versions.commonsLang3Version"

    implementation "uk.gov.justice.service.laa-crime:crime-commons-spring-boot-starter-rest-client:2.0.0"

    annotationProcessor "org.projectlombok:lombok"
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

    testImplementation "com.h2database:h2"
    testImplementation "org.pitest:pitest:$versions.pitest"
    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.springframework.security:spring-security-test"
    testImplementation "com.squareup.okhttp3:okhttp:$versions.okhttpVersion"
    testImplementation "com.squareup.okhttp3:mockwebserver:$versions.mockwebserverVersion"
}

tasks.named("test").configure {
    it.useJUnitPlatform()
    it.dependsOn "cleanTest"
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    onlyIf = { true }
    reports {
        xml.required = true
        html.required = true
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ["**/entity/**",
                              "**/dto/**",
                              "**/config/**"])
        }))
    }
}

pitest {
    targetClasses = ["uk.gov.justice.laa.crime.evidence.*", "uk.gov.justice.laa.crime.evidence.controller.*", "uk.gov.justice.laa.crime.evidence.validation.*"]
    excludedClasses = ["uk.gov.justice.laa.crime.evidence.dto.*", "uk.gov.justice.laa.crime.evidence.mapper.*", "uk.gov.justice.laa.crime.evidence.CrimeEvidenceApplication"]
    threads = 5
    outputFormats = ["XML", "HTML"]
    timestampedReports = false
    mutationThreshold = 60
}

tasks.named("sonarqube") {
    it.dependsOn "test"
}

sonarqube {
    properties {
        property "sonar.exclusions", "**/entity/**.java , **/model/**.java , **/dto/**.java , **/config/**.java, **/jms/**.java,**/exception/**.java,**/handler/**.java"
        property "sonar.coverage.exclusions", "**/CrimeEvidenceApplication.java"
        property "sonar.coverage.jacoco.xmlReportPaths", "${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml"
        property "sonar.projectKey", "ministryofjustice_laa-crime-evidence"
        property "sonar.organization", "ministryofjustice"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.projectName", "Crime Apps :: crime-evidence"
        property "sonar.pitest.mode", "reuseReport"
        property "sonar.pitest.reportsDirectory", "build/reports/pitest"
    }
}

jsonSchema2Pojo {
    executions {
        main {
            methods.builders = true
            methods.buildersDynamic = true
            methods.annotateJsr303Jakarta = true
            fields.floatUseBigDecimal = true
            dateTime.dateTimeType = "java.time.LocalDateTime"
            klass.targetPackage = "uk.gov.justice.laa.crime.evidence.model.common"
            io.source.setFrom files("${project.rootDir}/src/main/resources/schemas")
        }
    }
}